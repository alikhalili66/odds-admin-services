#Minimum number of Connections a pool will maintain at any given time
c3p0.minPoolSize=10
driver_class=oracle.jdbc.driver.OracleDriver
provider_class=io.vertx.ext.jdbc.spi.impl.C3P0DataSourceProvider
#
c3p0.maxPoolSize=200

#
c3p0.initialPoolSize=10

#c3p0 is very asynchronous. Slow JDBC operations are generally performed by helper threads that don't hold contended locks. 
#Spreading these operations over multiple threads can significantly improve performance by allowing multiple operations to be performed simultaneously.
#Default:3 
c3p0.numHelperThreads=50

#
c3p0.maxStatementsPerConnection=9

#
c3p0.statementCacheNumDeferredCloseThreads=2

#When a c3p0 DataSource attempts and fails to acquire a Connection, it will retry up to acquireRetryAttempts times
c3p0.acquireRetryAttempts=1

#with a delay of acquireRetryDelay between each attempt 
c3p0.acquireRetryDelay=5

#If you set breakAfterAcquireFailure to true, the DataSource will consider itself broken after a failed round of Connection attempts, and future client requests will fail immediately.
c3p0.breakAfterAcquireFailure=false

#Number of connections in a clump acquired when pool is exhausted
c3p0.acquireIncrement=4

#Idle time before a c3p0 pooled connection is validated (in seconds)
c3p0.idleConnectionTestPeriod=60

# Seconds a Connection can remain pooled but unused before being discarded. Zero means idle connections never expire
# Default:0
c3p0.maxIdleTime=600

#Default: 0
#Seconds. If set, if an application checks out but then fails to check-in [i.e. close()] a Connection within the specified period of time, the pool will unceremoniously destroy() the Connection. This permits applications with occasional Connection leaks to survive, rather than eventually exhausting the Connection pool. And that's a shame. Zero means no timeout, applications are expected to close() their own Connections. Obviously, if a non-zero value is set, it should be to a value longer than any Connection should reasonably be checked-out. Otherwise, the pool will occasionally kill Connections in active use, which is bad. This is basically a bad idea, but it's a commonly requested feature. Fix your $%!@% applications so they don't leak Connections! Use this temporarily in combination with debugUnreturnedConnectionStackTraces to figure out where Connections are being checked-out that don't make it back into the pool!
c3p0.unreturnedConnectionTimeout=60

#If true, and if unreturnedConnectionTimeout is set to a positive value, then the pool will capture the stack trace (via an Exception) of all Connection checkouts, and the stack traces will be printed when unreturned checked-out Connections timeout. This is intended to debug applications with Connection leaks, that is applications that occasionally fail to return Connections, leading to pool growth, and eventually exhaustion (when the pool hits maxPoolSize with all Connections checked-out and lost). This parameter should only be set while debugging, as capturing the stack trace will slow down every Connection check-out
c3p0.debugUnreturnedConnectionStackTraces=true
#http://stackoverflow.com/questions/14105932/c3p0-hangs-in-awaitavailable-with-hibernate
#http://www.mchange.com/projects/c3p0/#unreturnedConnectionTimeout
#http://www.mchange.com/projects/c3p0/#debugUnreturnedConnectionStackTraces
#https://sourceforge.net/p/c3p0/bugs/136/